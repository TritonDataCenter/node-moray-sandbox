#! /usr/bin/env node --abort-on-uncaught-exception

'use strict';

var assert = require('assert-plus');
var mod_bunyan = require('bunyan');
var mod_child = require('child_process');
var mod_client = require('../lib/client');
var mod_dashdash = require('dashdash');
var mod_uuid = require('uuid');

var HELP_OPTS = {
    includeDefault: true,
    includeEnv: true
};

var options = [
    {
        names: [ 'help', 'h' ],
        type: 'bool',
        help: 'Print this help and exit'
    },
    {
        names: [ 'cover' ],
        type: 'bool',
        help: 'Instrument Moray to collect code coverage information'
    },
    {
        names: [ 'port', 'p' ],
        type: 'positiveInteger',
        help: 'Port that Moray instance should listen on',
        default: 2020
    }
];

var parser = mod_dashdash.createParser({ options: options });
var opts;

try {
    opts = parser.parse(process.argv);
} catch (e) {
    console.error('run-sandbox: %s', e.message);
    process.exit(2);
}

if (opts.help) {
    console.log('usage: run-sandbox [OPTIONS]\noptions:\n%s', parser.help(HELP_OPTS));
    process.exit(0);
}

var LOG = mod_bunyan.createLogger({
    name: 'run-sandbox',
    level: (process.env.LOG_LEVEL || 'info'),
    stream: process.stdout
});

var orig_uuid = mod_uuid.v4();
var db_uuid = mod_uuid.v4();

var args, cmd;

if (opts.cover) {
    cmd = 'node_modules/.bin/istanbul';
    args = [
        'cover', '--no-default-excludes', '-i', '**/node_modules/moray-server/lib/**',
        'lib/run.js'
    ];
} else {
    cmd = 'lib/run.js';
    args = [];
}

args.push(orig_uuid);

// Start child process
var child = mod_child.fork(cmd, args, {
    cwd: __dirname + '/../',
    detached: true
});


child.on('message', function processResponse(response) {
    switch (response.type) {
    case 'error':
        LOG.error('Error in child:\n%j', response);
        return;
    case 'up':
        LOG.info({
            unixDir: response.unixDir
        }, 'Postgres has started');
        child.send({
            req_id: db_uuid,
            port: opts.port,
            type: 'createdb'
        });
        return;
    case 'client-info':
        LOG.info({
            dbName: db_uuid,
            moray: response.config
        }, 'Moray is running');
        return;
    case 'log-file':
        LOG.info('Child will log to %s', response.path);
        return;
    default:
        throw new Error('bad message type: ' + response.type);
    }
});
